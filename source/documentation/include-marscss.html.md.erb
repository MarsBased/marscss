---
title: '@include marscss'
layout: documentation
active: Documentation, include-marscss
anchors_menu: '> h1, > h2'
---

# @include marscss

In order to integrate marscss, first, you need to import `marscss` mixin in your .scss file. Take into account that  you need to import it after any custom modificacion of the marscss core.

This is the setup mixin that loads the configuration and  the [placeholders](#builder-placeholders) needed by the rest of components

since
: 1.0.0

~~~scss
@include marscss;
~~~

By default is the same of:

~~~scss
@include style(
  resets(),
  elements(),
  placeholders()
);
~~~

---------------------------------------------------

## builder placeholders

Add the main selectors starting with "%" to be used from `@extend` from your code or other parts of the application.

The main advantage of working with these extends is that they do not send any content to our css until they are called and on the other hand they help us to reuse the selectors in a more compact way.

since
: 1.0.0

dependencies
: map reset()
: map forms()
: map elements()

~~~scss
@include style(placeholders());
~~~

%reset, %reset-heading, %reset-text-block, %reset-button, %reset-list, %reset-checks, %reset-link, %reset-all, %columns, %container, %row, %column, %focus, %form-element, %form-checks, %label, %input, %textarea, %select, %radio, %checkbox, %h1, %h2, %h3, %h4, %h5, %h6,%a, %blockquote, %p, %ul, %ol, %li, %dl, %dt, %dd, %ratio

---------------------------------

## You can use extend and customize your rules

You can use the reset extends to directly clean the elements when creating the styles of the components.

You can override the reset functions if you want to add or modify those rules, as long as we modify the core it is important that this modification is done before loading the builders

marscss is designed so that all its core can be modified, that's why everything is assigned through functions and that's why it is very important that no builder is added before finishing the modifications of the core.


## customize elements

You have a group of variables that you can use to modify some of the properties.

<%= code_snippet('fonts',
                 "#{config.marscss_path}/core/_default-variables.scss") %>

<%= code_snippet('reset',
                 "#{config.marscss_path}/core/_default-variables.scss") %>

### rewrite common-heading()

As when working with any other part of the core it is enough to modify the functions before making the elements call or use any of the functions, there are 2 global functions that help us rewrite several elements at the same time `common-heading` `common-text-block` `common-list-block`.

In the first example we are going to directly rewrite `common-heading`

~~~scss
@function common-heading() {
  @return style(
    margin-bottom(3rem),
    margin-top(1rem)
  );
}
~~~

### rewrite element-h1()

If we wanted to modify a function reusing its previous value we could do it in this way, in this example we are going to add the red color to the rules that have `element-h1`

~~~scss
$new-h1: style(
  element-h1(),
  color($red)
);

@function element-h1() {
  @return $new-h1;
}
~~~

In this way, we call [extend](#extend) later to this modification of the core the color of the `%h1` will be generated with our rule modification, that is why it is very important that the modifications of the core are grouped before the [@include marscss](#include-marscss) or [extend](#extend), as you can see in <%= link_to 'recipes', '/documentation/recipes#recipes' %>.
