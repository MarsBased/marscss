@mixin help($function: false) {
  @debug help($function);
}

@function help($map: false) {
  @if ($map) {
    @if type-of($map) == 'string' {
      // TODO help extend if %
    }
    @if (type-of($map) == 'map') {
      $type: map-get($map, 'meta-type');
      @if $type == 'builder' {
        @return text-map-builder($map);
      } @else if $type == 'selector' {
        @return text-map-selector($map);
      } @else if $type == 'composer' {
        @return text-map-composer($map);
      } @else if $type == 'block' {
        @return text-map-block($map);
      } @else if $type == 'modifier' {
        @return text-map-composer($map);
      } @else {
        @return "#{$map} don't have type";
      }
    } @else {
      @return '#{$map} is not map';
    }
  } @else {
    @return text-help();
  }
}

@function text-help() {
  $print: '
      \D @include marscss has not been started, you have to
      \D initialize it just after the changes in the marscss core
      \D
      \D http://marscss.com/documentation/include-marscss
    ';

  @if $marscss-init {
    @debug $marscss-placeholders;
    $sort: map-sort($marscss-placeholders);
    $map-print: '
      \D %placeholder        function()
      \D -------------------------------------------
    ';

    @each $key, $value in $sort {
      $space: str-slice('                   ', str-length($key) - 20);
      $map-print: $map-print + '
        \D #{$key+$space} #{$value}()';
    }

    $print: '
      \A ------------------- ðŸš€
      \D
      \D @include marscss has been initiated.
      \D
      \D
      \D #{length($marscss-process-placeholders)} active placeholders:
      \D #{$map-print}
      \D
      \D If you want to know more about them, you just need to execute
      \D this same command adding the %name with or the function()
      \D
      \D http://marscss.com/documentation/placeholders
    ';
  }

  @return $print;
}

@function text-map-builder($map) {
  $type: map-get($map, 'meta-type');
  $name: map-get($map, 'meta-name');
  $description: map-get($map, 'meta-description');

  $m: '\A\A#{$name}
    \D --------------------
    \D TYPE: \A#{$type}\A
    \D DESCRIPTION:\A#{$description}\A
    \A RULES:\A #{map-keys(meta-clean($map))}\A
    \D -------------------- \A';

  @return $m;
}

@function text-map-composer($map) {
  $type: map-get($map, 'meta-type');
  $name: map-get($map, 'meta-name');
  $description: map-get($map, 'meta-description');
  $modifers: map-get($map, 'meta-modifiers');

  $m: '\A\A#{$name}
    \D --------------------
    \D TYPE: #{$type}\A
    \D DESCRIPTION: #{$description}
    \D
    \D MODIFERS: #{$modifers}
    \D --------------------';

  @return $m;
}

@function text-map-modifier($map) {
  $type: map-get($map, 'meta-type');
  $name: map-get($map, 'meta-name');
  $description: map-get($map, 'meta-description');
  $modifers: map-get($map, 'meta-modifiers');

  $m: '\A\A#{$name}
    \D --------------------
    \D TYPE: #{$type}\A
    \D DESCRIPTION: #{$description}\A
    \D MODIFERS: #{$modifers}
    \D --------------------';

  @return $m;
}

@function text-map-block($map) {
  $type: map-get($map, 'meta-type');
  $name: map-get($map, 'meta-name');
  $description: map-get($map, 'meta-description');
  $debug: map-debug($map);

  $m: '\A\A#{$name}
    \D --------------------
    \D TYPE: #{$type}\A
    \D DESCRIPTION:
    \D #{$description}
    \A
    \D CONTENT: #{$debug}
    \D --------------------';

  @return $m;
}

@function text-map-selector($map) {
  $type: map-get($map, 'meta-type');
  $name: map-get($map, 'meta-name');

  $clearSelector: ();

  $m: '\A\A#{$name}
    \D --------------------
    \D TYPE: #{$type}\A
    \D SELECTOR:
    -------------------- \A';

  @return $m;
}
