@function map-debug($map, $args...) {
  @if map-get($map, 'meta-type') == 'builder' {
    $newmap: ();
    @each $key, $value in meta-clean($map) {
      $value: meta-clean($value);
      $newmap: map-merge($newmap, ($key: $value));
    }
    $map: $newmap;
  }
  @return '\A\A' + map-stringify(meta-clean($map), $args...);
}

// https://github.com/lunelson/sass-maps-plus/blob/master/sass/_maps.scss
@function __str-times($str, $n: 1) {
  $output: '';
  @while $n > 0 {
    $output: $output + $str;
    $n: $n - 1;
  }
  @return $output;
}

/// return a pretty-printed string representation of a map
/// @access public
/// @group maps
/// @param {Map} $map - Map to inspect
/// @param {String} $tab - Indentation character(s) to use. Default is 2 spaces
/// @param {Number} $level [1] - Internal variable, **do not edit**
/// @return {String} - String representation of `$map`
/// @require {function} __str-times
@function map-stringify($map, $tab: '  ', $level: 1) {
  @if type-of($map) != 'map' {
    @return '#{inspect($map)}';
  }
  $length: length(map-keys($map));
  $indent: __str-times($tab, $level);
  $output: '(\A' + $indent;
  $i: 1;
  @each $key, $value in $map {
    @if type-of($value) == 'map' {
      $output: $output + $key + ': ' + map-stringify($value, $tab, $level + 1);
    } @else {
      $output: $output + $key + ': ' + $value;
    }
    @if $i < $length {
      $output: $output + ',\A' + $indent;
    }
    $i: $i + 1;
  }
  $outdent: __str-times($tab, $level - 1);
  @return unquote($output + '\A' + $outdent + ')');
}

// https://medium.com/@pentzzsolt/a-non-destructive-map-merge-function-for-sass-f91637f87b2e
@function map-merge-recursive($parent-map, $child-map) {
  $result: $parent-map;
  @each $key, $value in $child-map {
    @if (not map-has-key($result, $key)) or
      (type-of(map-get($result, $key)) != type-of($value)) or
      (not (type-of(map-get($result, $key)) == map and type-of($value) == map))
    {
      $result: map-merge($result, ($key: $value));
    } @else {
      $result: map-merge(
        $result,
        ($key: map-merge-recursive(map-get($result, $key), $value))
      );
    }
  }
  @return $result;
}
