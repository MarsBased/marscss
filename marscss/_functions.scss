// stylelint-disable function-url-quotes

@function is-number($value) {
  @return type-of($value) == "number";
}

@function is-time($value) {
  @return is-number($value) and index("ms" "s", unit($value)) != null;
}

@function is-duration($value) {
  @return is-time($value);
}

@function is-angle($value) {
  @return is-number($value) and index("deg" "rad" "grad" "turn", unit($value)) != null;
}

@function is-frequency($value) {
  @return is-number($value) and index("Hz" "kHz", unit($value)) != null;
}

@function is-integer($value) {
  @return is-number($value) and round($value) == $value;
}

@function is-relative-length($value) {
  @return is-number($value) and index("em" "ex" "ch" "rem" "vw" "vh" "vmin" "vmax", unit($value)) != null;
}

@function is-absolute-length($value) {
  @return is-number($value) and index("cm" "mm" "in" "px" "pt" "pc", unit($value)) != null;
}

@function is-percentage($value) {
  @return is-number($value) and unit($value) == "%";
}

@function is-length($value) {
  @return is-relative-length($value) or is-absolute-length($value);
}

@function is-resolution($value) {
  @return is-number($value) and index("dpi" "dpcm" "dppx", unit($value)) != null;
}

@function is-position($value) {
  @return is-length($value) or is-percentage($value) or index("top" "right" "bottom" "left" "center", $value) != null;
}

@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

@function image-url($url){
  $images-path: "images/" !default;
  @return url(quote($images-path + $url));
}

// Ascending
// Used to evaluate Sass maps like our grid breakpoints.
@mixin _assert-ascending($map, $map-name) {
  $prev-key: null;
  $prev-num: null;
  @each $key, $num in $map {
    @if $prev-num == null {
      // Do nothing
    } @else if not comparable($prev-num, $num) {
      @warn "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    } @else if $prev-num >= $num {
      @warn "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    }
    $prev-key: $key;
    $prev-num: $num;
  }
}

// Starts at zero
// Another grid mixin that ensures the min-width of the lowest breakpoint starts at 0.
@mixin _assert-starts-at-zero($map) {
  $values: map-values($map);
  $first-value: nth($values, 1);
  @if $first-value != 0 {
    @warn "First breakpoint in `$grid-breakpoints` must start at 0, but starts at #{$first-value}.";
  }
}

@function percent-ratio($x, $y){
  @return #{$y / $x * 100%} ;
}